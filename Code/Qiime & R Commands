# Import the fastq files into qiime
qiime tools import \
--type 'SampleData[PairedEndSequencesWithQuality]' \
--input-format CasavaOneEightSingleLanePerSampleDirFmt \
--input-path /Users/ellacaughran/gen711_lab/OneDrive_1_4-22-2022 \
--output-path ./Imported_Reads.qza

# Run Imported_Reads.qza through dada2
qiime dada2 denoise-paired \
--i-demultiplexed-seqs Imported_Reads.qza \
--p-trunc-len-f 230 \
--p-trunc-len-r 210 \
--p-trim-left-f 19 \
--p-trim-left-r 20 \
--o-denoising-stats dada2_rep_set \
--o-table dada2_table.qza \
--o-representative-sequences dada2_rep_set.qza \
--verbose

# quality visualization plots
qiime demux summarize --i-data Imported_Reads.qza --o-visualization quality.qzv 

# Provides rarifaction table
qiime feature-table summarize --i-table dada2_table.qza --o-visualization dada2_table.qzv

# Extract reads from silva database for classification
qiime feature-classifier extract-reads --i-sequences silva132_99.qza --p-f-primer GTGYCAGCMGCCGCGGTAA --p-r-primer CCGYCAATTYMTTTRAGTTT --p-min-length 100 --p-max-length 700 --o-reads silva-ref-seqs.qza

# Train the classifier
qiime feature-classifier fit-classifier-naive-bayes --i-reference-reads silva-ref-seqs.qza --i-reference-taxonomy majority_taxonomy_7_levels.qza --o-classifier silva_trained_classifier.qza

# Taxonomy Classifying
qiime feature-classifier classify-sklearn --i-classifier ./silva_trained_classifier.qza --i-reads ../rep-seqs.qza --o-classification silva_taxonomy.qza --p-confidence 0.7 --p-read-orientation auto

# Makes Metadata File
qiime metadata tabulate --m-input-file dns.qza --o-visualization 
dns.qzv

# Builds Phylogeny
qiime phylogeny align-to-tree-mafft-fasttree --i-sequences ./rep-seqs.qza --o-alignment ./aligned-rep-seqs.qza --o-masked-alignment ./masked-align-rep-seqs.qza --o-tree ./unrooted-tree.qza --o-rooted-tree ./rooted-tree.qza 

# Core Diversity Metrics
qiime diversity core-metrics-phylogenetic --i-phylogeny ./rooted-tree.qza --i-table ./table.qza --p-sampling-depth 2400 --m-metadata-file ./metadata.tsv --output-dir ./core-div-metrics

# Visualize Tree (convert qza to nwk)
qiime tools export --input-path rooted-tree.qza --output-path ./rooted-tree.nwk

# Make Taxa Barplots 
qiime taxa barplot --i-table ./table.qza --i-taxonomy silva_taxonomy.qza --o-visualization ./silva-taxa-bar-plots.qzv

##exporting files for phyloseq analysis in R
qiime tools export --input-path rarefied_table.qza --output-path ./phyloseq/
cd phyloseq
biom convert -i feature-table.biom -o feat_table.txt --to-tsv

qiime tools export --input-path its_classification.qza --output-path core-div-metrics/phyloseq

qiime tools export --input-path unrooted-tree.qza --output-path core-div-metrics/phyloseq

##rest of pipeline in R

#Installing Phyloseq
> if (!require("BiocManager", quietly = TRUE))
  +     install.packages("BiocManager")
setwd("/Users/ellacaughran/gen711_lab")
otu<-read.table(file = "feat_table.txt", header = TRUE)
head(otu)
tax<-read.table(file = "taxonomy.tsv", header = TRUE, sep = "\t")
head(tax)

#merging files
merged_file<-merge(otu, tax, by.x = c("OTUID"), by.y = c("OTUID"))
head(merged_file)

#note: number of rows should equal your shortest file length, drops taxonomy for OTUs that don't exist in your feature table

#outputting merged .txt file
write.table(merged_file, file = "combined_otu_tax.txt", sep = "\t", col.names = TRUE, row.names = FALSE)

'''
Need to open the merged .txt file in excel and split into two files: one for taxonomy
(with columns OTUID and taxonmic info) and the other file for the feature table (OTUID and abundances)
save each of these as a .csv

library(phyloseq)
library(qiime2R)
library(ggplot2)
library(ape)
library(vegan)
library(ggpubr)
install.packages("agricolae")
library(agricolae)
library(ggsignif)
install.packages("dplyr")
library(dplyr)


#read in all of the data
# make numeric data columns readable as numberic
feat_table = read.csv("Split_feature_table.csv", sep = ",", row.names =1, check.names = FALSE)
feat_table$MUAPs051221a1<-as.numeric(feat_table$MUAPs051221a1)
feat_table$MUAPs051221a2<-as.numeric(feat_table$MUAPs051221a2)
feat_table$MUAPs051221a3<-as.numeric(feat_table$MUAPs051221a3)
feat_table$MUAPs051221b1<-as.numeric(feat_table$MUAPs051221b1)
feat_table$MUAPs051221b2<-as.numeric(feat_table$MUAPs051221b2)
feat_table$MUAPs051221b3<-as.numeric(feat_table$MUAPs051221b3)
feat_table$OYAPs051221a1<-as.numeric(feat_table$OYAPs051221a1)
feat_table$OYAPs051221a2<-as.numeric(feat_table$OYAPs051221a2)
feat_table$OYAPs051221b1<-as.numeric(feat_table$OYAPs051221b1)
feat_table$OYAPs051221b2<-as.numeric(feat_table$OYAPs051221b2)
feat_table$OYAPs051221b3<-as.numeric(feat_table$OYAPs051221b3)


feat_table = as.matrix(feat_table)


taxonomy = read.csv("split_tax.csv", sep = ",", row.names = 1)
taxonomy = as.matrix(taxonomy)

metadata_full = read.table("metadata.tsv", sep = "\t", row.names =1, header = TRUE)

phy_tree = read_tree("tree.nwk")

#importing as phyloseq objects
OTU = otu_table(feat_table, taxa_are_rows = TRUE)
TAX = tax_table(taxonomy)
META = sample_data(metadata_full)
#tree was already imported as phyloseq object


#checking that OTU names are consistent across objects
head(taxa_names(TAX))
head(taxa_names(OTU))
head(taxa_names(phy_tree))

#making sure files have same sample names
sample_names(OTU)
sample_names(META)


##combining the objects to create the phyloseq object

physeq = phyloseq(OTU, TAX, META, phy_tree)


##doing statistical analysis on diversity and richness


##making a dataframe with diversity results and metadata info
richness_est<-estimate_richness(physeq, split = TRUE, measures = c("Observed", "Chao1")) ##error when doing diversity: input data must be non-negative
richness_est_c <- tibble::rownames_to_column(richness_est, "index")
metadata_c <- tibble::rownames_to_column(metadata_full, "index")
rich_w_meta <- left_join(richness_est_c, metadata_c, by = "index") #now you can do stats on the diversity dataframe!
# error with diversity, kept saying input data must be non-negative. Unsure where negative values are in the dataset

#making model for species richness  
mod <- lm(Observed~Location, data = rich_w_meta)
anova(mod)
mod <- lm(Chao1~Location, data = rich_w_meta)
anova(mod)

#plotting species richness by location
p1<-ggplot(rich_w_meta, aes(x = factor(Location), y = Observed)) + 
  geom_boxplot() +
  ylim(10000,17500) +
  labs(x = "Location", y = "Richness")




























